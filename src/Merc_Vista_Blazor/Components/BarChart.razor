@using Merc_Vista_Blazor.Models;
@using System.Text.Json;
@inject HttpClient httpClient;

@if (Series is not null)
{
    <div>
        <MudChart ChartType="ChartType.Bar" ChartSeries="Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="80%" Height="350px"></MudChart>
    </div>
}

@*<MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>*@

@code {

    [Parameter] public DateRange? dateRangeSelecionado { get; set; }
    [Parameter] public int filtroQuantidadeDatas { get; set; }

    private int Index = -1;

    public List<ChartSeries>? Series { get; set; } = null;

    public string[]? XAxisLabels { get; set; } = null;

    public async Task CarregarForcaRelativa(List<string>? ativos)
    {
        if (ativos == null || ativos.Count() < 2)
            return;

        var queryString = $"?ativosSelecionados={string.Join(",", ativos.Select(a => a))}&dataInicial={dateRangeSelecionado!.Start}&dataFinal={dateRangeSelecionado.End}&totalItensAmostrar={filtroQuantidadeDatas}";
        var result = await httpClient.GetFromJsonAsync<ResultModel<ForcaRelativaModel>>($"ativos/calular-forca-relativa{queryString}");

        MontarChart(result.Data);
    }

    public void ApagarCharSeries() => Series = null;

    private void MontarChart(ForcaRelativaModel forcaRelativaModels)
    {
        Series = new List<ChartSeries>();
        forcaRelativaModels.ChartProp.ForEach(a =>
        {
            var chartSeries = new ChartSeries() { Name = a.NomeAtivo, Data = a.Valor };
            Series.Add(chartSeries);
        });

        XAxisLabels = forcaRelativaModels.XAxisLabelsDatas.ToArray();
    }
}