@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common;
@using ChartJS = ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.Util;
@using Merc_Vista_Blazor.Models;
@using Drawing = System.Drawing;
@using Color = System.Drawing.Color;
@using Merc_Vista_Blazor.Services;
@inject IServiceCaller ServiceCaller;
@inject IDialogService DialogService;

@if (_config is not null)
{
    <Chart Config="_config"></Chart>
}

@code {
    [Parameter] public DateRange? dateRangeSelecionado { get; set; }
    [Parameter] public int filtroQuantidadeDatas { get; set; }
    private BarConfig? _config;

    public async Task CarregarForcaRelativa(List<string>? ativos)
    {
        if (ativos == null || ativos.Count() < 2)
            return;

        var resultRequest = await ServiceCaller.CallAsync<HttpClient, HttpResponseMessage>(async httpClient =>
                            {
                                var queryString = $"?ativosSelecionados={string.Join(",", ativos.Select(a => a))}&dataInicial={dateRangeSelecionado!.Start}&dataFinal={dateRangeSelecionado.End}&totalItensAmostrar={filtroQuantidadeDatas}";
                                return await httpClient.GetAsync($"ativos/calular-forca-relativa{queryString}");
                            });


        if (!resultRequest.IsSuccessStatusCode)
        {
            var parameters = new DialogParameters();
            var errors = await resultRequest.Content.ReadFromJsonAsync<List<ErrorResponseModel>>();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Errors", errors);
            parameters.Add("Navigation", "carregar-arquivos");
            DialogService.Show<ErrorDialog>("Erro", parameters, options);
            return;

        }

        var resultConvet = await resultRequest.Content.ReadFromJsonAsync<ResultModel<ForcaRelativaModel>>();
        MontarChartJs(resultConvet!.Data);
    }

    public void ApagarCharJs() => _config = null;

    private void MontarChartJs(ForcaRelativaModel forcaRelativaModels)
    {
        MontarBarConfig();

        forcaRelativaModels.ChartProp.ForEach(a =>
        {
            var (r, g, b) = CalcularCoresComplementares();
            var dataset = new BarDataset<decimal>(a.Valor.Select(d => decimal.Parse(d.ToString("0.00"))))
                {
                    Label = a.NomeAtivo,
                    BackgroundColor = ColorUtil.ColorString(r, g, b),
                    BorderColor = ColorUtil.FromDrawingColor(Color.Black),
                    BorderWidth = 2
                };

            _config!.Data.Datasets.Add(dataset);
        });

        forcaRelativaModels.XAxisLabelsDatas.ToList().ForEach(a => _config.Data.Labels.Add(a));
    }

    private void MontarBarConfig()
    {
        if (_config is null)
            _config = new BarConfig
                {
                    Options = new BarOptions
                    {
                        Responsive = true,
                        Legend = new Legend
                        {
                            Position = ChartJS.Position.Top
                        },
                    }
                };
        else
        {
            _config.Data.Datasets.Clear();
            _config.Data.Labels.Clear();
        }
    }

    public static (byte r, byte g, byte b) CalcularCoresComplementares()
    {
        var random = new Random();

        byte r = (byte)random.Next(0, 256);
        byte g = (byte)random.Next(0, 256);
        byte b = (byte)random.Next(0, 256);

        byte rc = (byte)(255 - r);
        byte gc = (byte)(255 - g);
        byte bc = (byte)(255 - b);
        return (rc, gc, bc);
    }
}
