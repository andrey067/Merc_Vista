@page "/forca-relativa"
@using Merc_Vista_Blazor.Components
@using System.Text.Json;
@using Merc_Vista_Blazor.Models;
@using Merc_Vista_Blazor.Services;
@inject HttpClient httpClient;
@inject IServiceCaller ServiceCaller;

<PageTitle>Força Relativa</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Força Relativa</MudText>
@*<Loading isLoading="load" />*@

@if (ativosNomeSelect != null)
{
    <MudGrid Class="d-flex align-center">
        <MudItem xs="12" sm="6" md="4">
            <MudSelect T="string" Label="Selecione dois ou mais Ativos" OnClearButtonClick="LimparCampos" MultiSelection="true" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterRight" SelectedValuesChanged="LiberarFiltroDeDatas" @bind-Value="tituloSelecionado" Clearable>
            @foreach (var state in ativosNomeSelect)
                {
                    <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem sm="6" md="4">
            <MudSwitch Label="Quantidade de Data a ser filtradas" @bind-Checked="@mostrarSwitchItens" />
        </MudItem>
    </MudGrid>
}

@if (mostrarSwitchItens)
{
    <MudItem xs="12" sm="6" md="4">
        <MudSelect T="int" AnchorOrigin="Origin.BottomCenter" @bind-Value="filtroQuantidadeDatas">
            @foreach (var item in quantidadeDatas)
            {
                <MudSelectItem T="int" Value="item" />
            }
        </MudSelect>
    </MudItem>
}

@if (mostrarDataPickerEPesquisa)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudDateRangePicker @ref="_picker" Editable="true" Label="Selecione a data a ser filtrada" @bind-DateRange="dateRangeSelect">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker!.Clear())">Clear</MudButton>
                    <MudButton OnClick="@(() => _picker!.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => _picker!.Clear())">Ok</MudButton>
                </PickerActions>
            </MudDateRangePicker>
        </MudItem>
    </MudGrid>
}

@if (mostrarDataPickerEPesquisa)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudButton Disabled="@_processing" OnClick="async () => await CarregarForcaRelativa()" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processando</MudText>
                }
                else
                {
                    <MudText>Pesquisar</MudText>
                }
            </MudButton>
        </MudItem>
    </MudGrid>
}

<BarChartJs @ref="_barChartJs" dateRangeSelecionado="dateRangeSelect" filtroQuantidadeDatas="filtroQuantidadeDatas"></BarChartJs>

@code {
    private bool load = true;
    private bool mostrarDataPickerEPesquisa;
    private bool mostrarSwitchItens;
    private string? tituloSelecionado = null;
    private int filtroQuantidadeDatas { get; set; } = 10;
    private List<string>? ativosNomeSelect { get; set; } = null;
    private DateRange? dateRangeSelect;
    private List<string>? ativosSelecionados { get; set; } = null;
    private BarChartJs? _barChartJs;
    private List<int> quantidadeDatas = new List<int> { 10, 20, 30 };
    private MudDateRangePicker? _picker;
    private bool _processing = false;


    protected override async Task OnInitializedAsync() => await CarregarNomeTitulos();

    private async Task CarregarNomeTitulos()
    {
        load = true;
        var result = await ServiceCaller.CallAsync<HttpClient, ResultModel<TituloData>>(async http => await http.GetFromJsonAsync<ResultModel<TituloData>>("ativos/obterNomeAtivos"));
        ativosNomeSelect = result?.Data.Ativo;
        dateRangeSelect = new DateRange(result?.Data.DataInicial, result?.Data.Datafinal);
        load = false;
    }

    private void LiberarFiltroDeDatas(IEnumerable<string> titulosSelecionados)
    {
        if (titulosSelecionados == null || titulosSelecionados.Count() < 2)
            return;
        ativosSelecionados = titulosSelecionados.ToList();
        mostrarDataPickerEPesquisa = true;
    }

    private async Task CarregarForcaRelativa()
    {
        _processing = true;
        await _barChartJs!.CarregarForcaRelativa(ativosSelecionados)!;
        _picker!.Close();
        _processing = false;
    }

    private void LimparCampos()
    {
        mostrarDataPickerEPesquisa = false;
        _barChartJs!.ApagarCharJs();
    }
}
