@page "/forca-relativa"
@using Merc_Vista_Blazor.Components
@using System.Text.Json;
@using Merc_Vista_Blazor.Models;
@using Merc_Vista_Blazor.Services;
@using System.Net;
@using System.Globalization;
@inject HttpClient httpClient;
@inject IServiceCaller ServiceCaller;
@inject IDialogService DialogService;
@inject NavigationManager navigation;

<PageTitle>Força Relativa</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Força Relativa</MudText>

@if (ativosNomeSelect != null)
{
    <MudGrid Class="d-flex align-center">
        <MudItem xs="12" sm="6" md="4">
            <MudSelect T="string" Label="Selecione dois ou mais Ativos" OnClearButtonClick="LimparCampos" MultiSelection="true" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterRight" SelectedValuesChanged="LiberarFiltroDeDatas" @bind-Value="tituloSelecionado" Clearable>
                @foreach (var state in ativosNomeSelect)
                {
                    <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
}

@if (mostrarDataPickerEPesquisa)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <DatePickerRange DateRangeSelect="dateRangeSelect" ValorChanged="AtualizarData"></DatePickerRange>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudSlider @bind-Value="RangeDate">Buscar pelos ultimos @RangeDate.ToString() dias</MudSlider>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudButton Disabled="@_processing" OnClick="async () => await CarregarForcaRelativa()" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processando</MudText>
                }
                else
                {
                    <MudText>Pesquisar</MudText>
                }
            </MudButton>
        </MudItem>
    </MudGrid>
}

<BarChartJs @ref="_barChartJs" dateRangeSelecionado="dateRangeSelect" filtroQuantidadeDatas="RangeDate"></BarChartJs>

@code {
    private bool mostrarDataPickerEPesquisa;
    private string? tituloSelecionado = null;
    private int RangeDate { get; set; } = 10;
    private List<string>? ativosNomeSelect { get; set; } = null;
    private DateRange? dateRangeSelect { get; set; }
    private List<string>? ativosSelecionados { get; set; } = null;
    private BarChartJs? _barChartJs;
    private bool _processing = false;

    protected override async Task OnInitializedAsync() => await CarregarNomeTitulos();

    private async Task CarregarNomeTitulos()
    {
        var resultRequest = await ServiceCaller.CallAsync<HttpClient, HttpResponseMessage>(async http => await httpClient.GetAsync($"ativos/obterNomeAtivos?rangeDate={RangeDate}"));

        if (!resultRequest.IsSuccessStatusCode)
        {
            await HandleRequestError(resultRequest);
            return;
        }

        var resultConvet = await resultRequest.Content.ReadFromJsonAsync<ResultModel<TituloData>>();
        ativosNomeSelect = resultConvet?.Data.Ativo ?? new List<string>();
        dateRangeSelect = new DateRange(resultConvet?.Data.DataInicial, resultConvet?.Data.Datafinal ?? DateTime.MinValue);
        RangeDate = (dateRangeSelect.End - dateRangeSelect.Start)!.Value.Days;
    }

    private void LiberarFiltroDeDatas(IEnumerable<string> titulosSelecionados)
    {
        if (titulosSelecionados == null || titulosSelecionados.Count() < 2)
            return;
        ativosSelecionados = titulosSelecionados.ToList();
        mostrarDataPickerEPesquisa = true;
    }

    private async Task CarregarForcaRelativa()
    {
        _processing = true;
        await _barChartJs!.CarregarForcaRelativa(ativosSelecionados)!;
        _processing = false;
    }

    private void LimparCampos()
    {
        mostrarDataPickerEPesquisa = false;
        _barChartJs!.ApagarCharJs();
    }

    private void AtualizarData(DateRange? dateRange)
    {
        dateRangeSelect = dateRange;
        RangeDate = (dateRangeSelect.End - dateRangeSelect.Start)!.Value.Days;
    }

    private async Task HandleRequestError(HttpResponseMessage response)
    {
        var parameters = new DialogParameters();
        var errors = await response.Content.ReadFromJsonAsync<List<ErrorResponseModel>>();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        parameters.Add("Errors", errors);
        parameters.Add("Navigation", "carregar-arquivos");
        DialogService.Show<ErrorDialog>("Erro", parameters, options);
    }
}
