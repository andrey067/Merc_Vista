@page "/carregar-arquivos"
@inject HttpClient httpClient;
@inject NavigationManager navigation
@inject IServiceCaller ServiceCaller
@inject IDialogService DialogService;
@using System.Net.Http.Headers;
@using Merc_Vista_Blazor.Extensions;
@using Merc_Vista_Blazor.Models;
@using Merc_Vista_Blazor.Services;
@using System.IO.Compression;
@using System.Text;

<PageTitle>Carregar Arquivos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Carregar Arquivos</MudText>

<MudText Class="mb-8">Selecione os arquivos a serem carregados</MudText>

<MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".csv" FilesChanged="UploadFiles" MaximumFileCount="1000">
    <ButtonTemplate>
        <MudCardActions>
            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AttachFile" for="@context"> Somente arquivos .csv</MudButton>
            @if (_files.Count() > 0)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-5" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="@(async () => await Enviar())">Enviar</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-5" OnClick="@(() => Reset())">Limpar arquivos</MudButton>
            }
        </MudCardActions>
    </ButtonTemplate>
</MudFileUpload>

@if (_files.Count() > 0)
{
    <MudList>
        @foreach (var file in _files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    private IList<IBrowserFile> _files = new List<IBrowserFile>();

    private void UploadFiles(IReadOnlyList<IBrowserFile> files) => files.ToList().ForEach(file => _files.Add(file));


    private async Task Enviar()
    {
        var resultRequest = await ServiceCaller.CallAsync<HttpClient, HttpResponseMessage>(async http =>
        {
            var content = await MontarRequisicao();
            return await http.PostAsync("UploadFile/upload-zip-file-stream", content);
        });

        if (resultRequest.IsSuccessStatusCode)
        {
            navigation.NavigateTo("forca-relativa");
            return;
        }

        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var errors = await resultRequest.Content.ReadFromJsonAsync<List<ErrorResponseModel>>();
        parameters.Add("Errors", errors);
        DialogService.Show<ErrorDialog>("Erro", parameters, options);
    }

    private async Task<byte[]> CompactarArquivos(IBrowserFile file) => await CompressGzip.Compress(file);

    private async Task<MultipartFormDataContent> MontarRequisicao()
    {
        var formData = new MultipartFormDataContent();

        foreach (var file in _files)
        {
            var compressedData = await CompactarArquivos(file);
            var content = new ByteArrayContent(compressedData);
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                {
                    Name = file.Name,
                    FileName = file.Name + ".gz"
                };
            content.Headers.ContentType = new MediaTypeHeaderValue("application/gzip");
            formData.Add(content);
        }

        return formData;
    }

    private void Reset() => _files.Clear();
}
