@page "/carregar-arquivos"
@inject HttpClient httpClient;
@inject NavigationManager navigation
@inject IServiceCaller ServiceCaller;
@using System.Net.Http.Headers;
@using Merc_Vista_Blazor.Services;

<PageTitle>Carregar Arquivos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Carregar Arquivos</MudText>

<MudText Class="mb-8">Selecione os arquivos a serem carregados</MudText>

<MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".csv" FilesChanged="UploadFiles" MaximumFileCount="1000">
    <ButtonTemplate>
        <MudCardActions>
            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AttachFile" for="@context"> Somente arquivos .csv</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-5" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="@(async () => await Submit())">Enviar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-5" OnClick="@(() => Reset())">Limpar arquivos</MudButton>
        </MudCardActions>
    </ButtonTemplate>
</MudFileUpload>

@if (files != null && !load)
{
    <MudList>
        @foreach (var file in files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private bool load = false;

    private void UploadFiles(IReadOnlyList<IBrowserFile> files) => files.ToList().ForEach(file => this.files.Add(file));

    private async Task Submit()
    {
        try
        {
            await ServiceCaller.CallAsync<HttpClient, Action>(http => async () =>
            {
                var tasks = files.Select(async file =>
                 {
                     var content = await CreateFormDataContent(file);
                     var response = await http.PostAsync("UploadFile/upload-csv-file-stream", content);
                     response.EnsureSuccessStatusCode();
                 });

                await Task.WhenAll(tasks);
            });                       

            navigation.NavigateTo("forca-relativa");
        }
        catch (Exception exc)
        {
            Console.WriteLine($"Erro ao fazer upload do arquivo", exc.Message);
        }
    }

    private async Task<MultipartFormDataContent> CreateFormDataContent(IBrowserFile e)
    {
        var formData = new MultipartFormDataContent();
        formData.Headers.ContentType!.MediaType = "multipart/form-data";
        var fileContent = await GetFileContentAsync(e);
        formData.Add(fileContent, "file", e.Name);
        return formData;
    }

    private async Task<ByteArrayContent> GetFileContentAsync(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var fileContent = new ByteArrayContent(buffer);
        fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);
        return fileContent;
    }

    private void Reset() => files.Clear();
}
