@page "/carregar-arquivos"
@inject HttpClient httpClient;
@using System.Net.Http.Headers;

<PageTitle>Carregar Arquivos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Carregar Arquivos</MudText>

<MudText Class="mb-8">Selecione os arquivos a serem carregados</MudText>

<MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".csv" FilesChanged="UploadFiles">
    <ButtonTemplate>
        <MudCardActions>
            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AttachFile" for="@context"> Somente arquivos .csv</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-5" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="@(async () => await Submit())">Submit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-5" OnClick="@(() => Reset())">Limpar arquivos</MudButton>
        </MudCardActions>
    </ButtonTemplate>
</MudFileUpload>

@if (files != null)
{
    <MudList>
        @foreach (var file in files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}
@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    MultipartFormDataContent? formData = new MultipartFormDataContent();

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            formData = await CreateFormDataContent(file);
            this.files.Add(file);
        }
    }

    private async Task<MultipartFormDataContent> CreateFormDataContent(IBrowserFile e)
    {
        var formData = new MultipartFormDataContent();
        formData.Headers.ContentType!.MediaType = "multipart/form-data";
        var fileContent = await GetFileContentAsync(e);
        formData.Add(fileContent, "file", e.Name);
        return formData;
    }

    private async Task<ByteArrayContent> GetFileContentAsync(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var fileContent = new ByteArrayContent(buffer);
        fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);
        return fileContent;
    }

    private async Task Submit()
    {
        try
        {
            var response = await httpClient.PostAsync("UploadFile/upload-csv-file-stream", formData);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception exc)
        {
            Console.WriteLine($"Erro ao fazer upload do arquivo", exc.Message);
        }
    }

    private void Reset()
    {
        files.Clear();
        formData = new MultipartFormDataContent();
    }
}
