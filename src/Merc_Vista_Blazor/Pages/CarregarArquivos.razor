@page "/carregar-arquivos"
@inject HttpClient httpClient;
@using System.Net.Http.Headers;
@using System.Text;
@using Merc_Vista_Blazor.ViewModel;

<h3>Carregar Arquivos</h3>
<Field>
    <FilePicker @ref="filePickerCustom"
                Multiple
                Directory
                Filter="*.csv"
                Upload="OnFileUpload"
                ShowMode="FilePickerShowMode.List">
        <FileTemplate>
            <Div Flex="Flex.JustifyContent.Between">
                <Div>
                    <Heading Size="HeadingSize.Is5">@context.File.Name</Heading>
                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                </Div>
                <Div>
                    @{
                        <Div>
                            <Icon TextColor="@GetTextColorForFileStatus(context.File.Status)" Name="@GetIconForFileStatus(context.File.Status)" />
                        </Div>
                    }
                </Div>
            </Div>
            <Divider Margin="Margin.Is0" />
        </FileTemplate>
        <ButtonsTemplate>
            <Progress Value="@filePickerCustom?.GetProgressPercentage()" />
            <Buttons>
                <Button Clicked="@context.Clear" Color="Color.Warning"><Icon Name="IconName.Clear" /></Button>
                <Button Clicked="@context.Upload" Color="Color.Primary"><Icon Name="IconName.FileUpload" /></Button>
            </Buttons>
        </ButtonsTemplate>
    </FilePicker>
</Field>

@code {
    private FilePicker? filePickerCustom;

    async Task OnFileUpload(FileUploadEventArgs file)
    {
        file.File.Status = FileEntryStatus.Uploading;
        try
        {
            var formData = await CreateFormDataContent(file);
            var response = await httpClient.PostAsync("UploadFile/upload-csv-file-stream", formData);
            if (response.IsSuccessStatusCode)
                file.File.Status = FileEntryStatus.Uploaded;
            else
                file.File.Status = FileEntryStatus.Error;

            response.EnsureSuccessStatusCode();
        }
        catch (Exception exc)
        {
            file.File.Status = FileEntryStatus.Error;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task<MultipartFormDataContent> CreateFormDataContent(FileUploadEventArgs e)
    {
        var formData = new MultipartFormDataContent();
        formData.Headers.ContentType!.MediaType = "multipart/form-data";
        var fileContent = await GetFileContentAsync(e.File);
        formData.Add(fileContent, "file", e.File.Name);
        return formData;
    }

    private async Task<ByteArrayContent> GetFileContentAsync(IFileEntry file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var fileContent = new ByteArrayContent(buffer);
        fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.Type);
        return fileContent;
    }   

    private IconName GetIconForFileStatus(FileEntryStatus status) =>
     status switch
     {
         FileEntryStatus.Ready => IconName.FileUpload,
         FileEntryStatus.Uploading => IconName.Bolt,
         FileEntryStatus.Uploaded => IconName.CheckCircle,
         FileEntryStatus.Error => IconName.TimesCircle,
         _ => IconName.TimesCircle
     };

    private TextColor GetTextColorForFileStatus(FileEntryStatus status) =>
        status switch
        {
            FileEntryStatus.Ready => TextColor.Primary,
            FileEntryStatus.Uploading => TextColor.Warning,
            FileEntryStatus.Uploaded => TextColor.Success,
            FileEntryStatus.Error => TextColor.Danger,
            _ => TextColor.Dark
        };
}
